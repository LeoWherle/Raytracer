@startuml





/' Objects '/

class AABB {
	+AABB()
	+AABB(const Interval& x, const Interval& y, const Interval& z)
	+AABB(const Point3D& min, const Point3D& max)
	+~AABB()
	+centroid() : Point3D {query}
	+m_max : Point3D
	+m_min : Point3D
	+hits(const Ray& ray, HitRecord& hitrec) : bool {query}
	+area() : float
	+grow(Point3D p) : void
}


class AMaterial {
	+~AMaterial()
	+emitted(float, float, const Point3D &) : Color {query}
	+scatter(const Ray &, const HitRecord &, Color &, Ray &) : bool {query}
}


class ArgumentsLoader {
	+ArgumentsLoader()
	+~ArgumentsLoader()
	+has(const std::string& key) : bool
	+has(uint32_t index) : bool
	+operator<<(std::ostream& os, const ArgumentsLoader& params) : std :: ostream&
	#_flag_params : std::map<std::string, std::string>
	+get(const std::string& key) : std::string
	+get(uint32_t index) : std::string
	#_positional_params : std::vector<std::string>
	+clear() : void
	+parse(int ac, char** av) : void
	+remove(const std::string& key) : void
	+set(const std::string& key, const std::string& value) : void
	+visit(std::function<void ( const std::string&, const std::string& )> visitor) : void
}


class ArgumentsLoader::HelpArgument {
	+HelpArgument(const std::string& message)
	+HelpArgument(const char* const message)
	+~HelpArgument()
	+what() : char* {query}
	-_message : const std::string
}


class ArgumentsLoader::MissingArgument {
	+MissingArgument(const std::string& message)
	+MissingArgument(const char* const message)
	+~MissingArgument()
	+what() : char* {query}
	-_message : const std::string
}


abstract class BVH {
	+BVH()
	+~BVH()
	+boundingBox() : AABB {query}
	+centroid() : Point3D {query}
	+{abstract} get_triangles() : auto {query}
	+hits(const Ray& r, Interval ray_d, HitRecord& rec) : bool {query}
	+hits_bvh(const Ray& r, Interval ray_d, HitRecord& rec, std::uint32_t node_index) : bool {query}
	-root_node_index : std::uint32_t
	-root_node_index : std::uint32_t
	-root_node_index : std::uint32_t
	-bvh_nodes : std::vector<BVH::Node>
	-prim_indices : std::vector<std::uint32_t>
	+build() : void
	+subdivide(std::uint32_t node_index) : void
	+update_bounds(std::uint32_t node_index) : void
}


class BaseMaterial {
	+BaseMaterial(const Color& color)
	+BaseMaterial(std::unique_ptr<ITexture> texture)
	+scatter(const Ray &, const HitRecord& rec, Color& attenuation, Ray& scattered) : bool {query}
	-_texture : std::unique_ptr<ITexture>
}


class Camera {
	+Camera()
	+background : Color
	+ray_color(const Ray& r, int depth, const World& world) : Color {query}
	-center : Point3D
	+lookat : Point3D
	+origin : Point3D
	-pixel00_loc : Point3D
	+new_ray(float u, float v) : Ray {query}
	-defocus_disk_u : Vector3D
	-defocus_disk_v : Vector3D
	-pixel_delta_u : Vector3D
	-pixel_delta_v : Vector3D
	+vup : Vector3D
	+aspect_ratio : float
	+defocus_angle : float
	+focus_dist : float
	-pixel_samples_scale : float
	+vfov : float
	+image_height : uint32_t
	+image_width : uint32_t
	+max_depth : uint32_t
	+samples_per_pixel : uint32_t
	+move(const Vector3D& direction) : void
	+render(World& world, IImage& image) : void
	+rotate(const Vector3D& axis, float angle) : void
	+update() : void
}


class CameraFactory {
	+CameraFactory()
	+~CameraFactory()
	+createCamera(const boost::property_tree::ptree& pt) : Camera {query}
}


class CheckerTexture {
	+CheckerTexture(const Color& c1, const Color& c2, float scale)
	+CheckerTexture(std::unique_ptr<ITexture> t1, std::unique_ptr<ITexture> t2, float scale)
	+~CheckerTexture()
	+value(float u, float v, const Point3D& p) : Color {query}
	-_scale : float
	-_textureEven : std::unique_ptr<ITexture>
	-_textureOdd : std::unique_ptr<ITexture>
}


class Color {
	+Color()
	+Color(float r, float g, float b)
	+~Color()
	+clamp() : Color {query}
	+operator*(const float nb) : Color {query}
	+operator*(const Color& color) : Color {query}
	+operator+(const Color& color) : Color {query}
	+operator+=(const Color& color) : Color
	+operator/(const float nb) : Color {query}
	+to_gamma() : Color {query}
	+to_linear() : Color {query}
	+operator*=(const float nb) : Color&
	+operator/=(const float nb) : Color&
	+_b : float
	+_g : float
	+_r : float
	+getB() : uint8_t {query}
	+getG() : uint8_t {query}
	+getR() : uint8_t {query}
}


class ColorFactory {
	+ColorFactory()
	+~ColorFactory()
	+createColor(const boost::property_tree::ptree& pt) : Color {query}
}


class HitRecord {
	+material : IMaterial*
	+p : Point3D
	+normal : Vector3D
	+front_face : bool
	+t : float
	+u : float
	+v : float
	+set_face_normal(const Ray& ray, const Vector3D& out_normal) : void
}


abstract class IImage {
	+~IImage()
	+{abstract} get_pixel(uint32_t x, uint32_t y) : Color {query}
	+{abstract} get_height() : uint32_t {query}
	+get_sample_count() : uint32_t {query}
	+{abstract} get_width() : uint32_t {query}
	+{abstract} clear() : void
	+finish_frame(uint32_t weight, float depth) : void
	+{abstract} resize(uint32_t width, uint32_t height) : void
	+{abstract} set_pixel(uint32_t x, uint32_t y, Color pixel_color, uint32_t weight, float width) : void
}


abstract class IMaterial {
	+~IMaterial()
	+{abstract} emitted(float u, float v, const Point3D& point) : Color {query}
	+{abstract} scatter(const Ray& r_in, const HitRecord& rec, Color& attenuation, Ray& scattered) : bool {query}
}


abstract class IPrimitive {
	+~IPrimitive()
	+{abstract} boundingBox() : AABB {query}
	+{abstract} centroid() : Point3D {query}
	+{abstract} hits(const Ray& r, Interval ray_max, HitRecord& rec) : bool {query}
}


abstract class ISaveable {
	+~ISaveable()
	+{abstract} save(const std::string& filename) : void {query}
}


abstract class ITexture {
	+~ITexture()
	+{abstract} value(float u, float v, const Point3D& point) : Color {query}
}


class Image {
	+Image()
	+Image(uint32_t width, uint32_t height)
	+~Image()
	+get_pixel(uint32_t x, uint32_t y) : Color {query}
	+get_stream() : auto
	-_pixels : std::vector<uint8_t>
	-_height : uint32_t
	-_width : uint32_t
	+get_height() : uint32_t {query}
	+get_width() : uint32_t {query}
	+clear() : void
	+draw(sf::RenderTarget& target, sf::RenderStates states) : void {query}
	+resize(uint32_t width, uint32_t height) : void
	+save(const std::string& filename) : void {query}
	+set_pixel(uint32_t x, uint32_t y, Color pixel_color, uint32_t weight, float depth) : void
	+writeBMP(const std::string& filename) : void {query}
	+writePNG(const std::string& filename) : void {query}
	+writePPM(const std::string& filename) : void {query}
	-writePixelInPPM(std::ofstream& out, uint32_t i, uint32_t j) : void {query}
}


class IncrementalImage {
	+IncrementalImage()
	+~IncrementalImage()
	+get_pixel(uint32_t x, uint32_t y) : Color {query}
	-_image : Image
	-_depth : float
	-_pixels : std::vector<Color>
	-_weight : uint32_t
	+get_height() : uint32_t {query}
	+get_sample_count() : uint32_t {query}
	+get_width() : uint32_t {query}
	+clear() : void
	+draw(sf::RenderTarget& target, sf::RenderStates states) : void {query}
	+finish_frame(uint32_t weight, float depth) : void
	+resize(uint32_t width, uint32_t height) : void
	+save(const std::string& filename) : void {query}
	+set_pixel(uint32_t x, uint32_t y, Color pixel_color, uint32_t weight, float depth) : void
}


class Interval {
	+Interval()
	+Interval(float min_, float max_)
	+Interval(const Interval& a, const Interval& b)
	+expand(float delta) : Interval {query}
	+contains(float x) : bool {query}
	+surrounds(float x) : bool {query}
	+clamp(float x) : float {query}
	+max : float
	+min : float
	+size() : float {query}
	+{static} empty : static const Interval
	+{static} universe : static const Interval
}


class JsonLoader {
	+JsonLoader()
	+~JsonLoader()
	+json : boost::property_tree::ptree
	+load(const std::string& filename) : void
}


class LightMaterial {
	+LightMaterial(std::unique_ptr<ITexture> tex)
	+LightMaterial(const Color& emit)
	+emitted(float u, float v, const Point3D& p) : Color {query}
	-texture : std::unique_ptr<ITexture>
}


class Main {
	+Main(int ac, char* av)
	+~Main()
	+_camera : Camera
	+_image : IncrementalImage
	+_params : Parameters
	+_world : World
	+arg_parse() : auto
	+render_real_time() : auto
	+run() : auto
	+_av : char**
	+_ac : int
}


class MaterialFactory {
	+MaterialFactory()
	+~MaterialFactory()
	+createMaterial(const boost::property_tree::ptree& pt) : IMaterial* {query}
}


class Matrix3D {
	+Matrix3D()
	+Matrix3D(const float matrix)
	+{static} rotation(const Vector3D& axis, float angle) : Matrix3D
	+operator*(const Point3D& other) : Point3D {query}
	+operator*(const Vector3D& other) : Vector3D {query}
	-_matrix : float
	+operator<<(std::ostream& os, const Matrix3D& mat) : std :: ostream&
}


class MetalMaterial {
	+MetalMaterial(std::unique_ptr<ITexture> tex, float fuzz)
	+MetalMaterial(const Color& color, float fuzz)
	+scatter(const Ray& r_in, const HitRecord& rec, Color& attenuation, Ray& scattered) : bool {query}
	-_fuzz : float
	-_texture : std::unique_ptr<ITexture>
}


class ObjFactory {
	+ObjFactory()
	+~ObjFactory()
	+createObj(const boost::property_tree::ptree& pt) : std::unique_ptr<Object> {query}
}


class ObjLoader {
	+{static} load(const std::string& filename, const Point3D& origin, float scale, IMaterial* mat) : auto
	-{static} parse_index(const std::string& line) : auto
	-{static} parse_normal(const std::string& line) : auto
	-{static} parse_vertex(const std::string& line) : auto
}


class Object {
	+Object(const Point3D& origin, float scale, IMaterial* mat)
	+~Object()
	+boundingBox() : AABB {query}
	#_material : IMaterial*
	#_origin : Point3D
	+centroid() : Point3D {query}
	+get_triangles() : auto {query}
	+hits(const Ray& ray, Interval ray_d, HitRecord& hitrec) : bool {query}
	#_scale : float
	#triangles : std::vector<std::unique_ptr<IPrimitive>>
	+addTriangle(std::array<Point3D, 3> vertices, std::array<Vector3D, 3> normals) : void
	+addTriangle(std::unique_ptr<TriangleObj> triangle) : void
}


class Parameters {
	+Parameters()
	+~Parameters()
	+_loader : ArgumentsLoader
	+_gui : bool
	+_help : bool
	+_output_file : std::string
	+_scene_file : std::string
	+load(int ac, char** av) : void
}


class Plane {
	+Plane(const Point3D& origin, const Vector3D& normal, IMaterial* material)
	+~Plane()
	+boundingBox() : AABB {query}
	+_material : IMaterial*
	+_origin : Point3D
	+centroid() : Point3D {query}
	+_normal : Vector3D
	+hits(const Ray& r, Interval ray_max, HitRecord& rec) : bool {query}
	+rotate(const Point3D& degrees) : void
	+translate(const Point3D& trans) : void
}


class PlaneFactory {
	+PlaneFactory()
	+~PlaneFactory()
	+createPlane(const boost::property_tree::ptree& pt) : std::unique_ptr<Plane> {query}
}


class Point3D {
	+Point3D()
	+Point3D(float x, float y, float z)
	+operator*(float scalar) : Point3D {query}
	+operator+(const Vector3D& vector) : Point3D {query}
	+operator+(const Point3D& point) : Point3D {query}
	+operator-(const Vector3D& vector) : Point3D {query}
	+operator+=(const Point3D& dot) : Point3D&
	+operator-(const Point3D& point) : Vector3D {query}
	+_x : float
	+_y : float
	+_z : float
	+operator<<(std::ostream& os, const Point3D& point) : std :: ostream&
}


class Point3DFactory {
	+Point3DFactory()
	+~Point3DFactory()
	+createPoint3D(const boost::property_tree::ptree& pt) : Point3D {query}
}


class Random {
	+{static} gen_vec(float min, float max) : Vector3D
	+{static} gen_vec() : Vector3D
	+{static} unit_sphere() : Vector3D
	+{static} unit_vector() : Vector3D
	+{static} gen_int() : auto
	+{static} gen_float(float min, float max) : float
	+{static} gen_float() : float
	-{static} s_RNG : static thread_local Xoshiro128Plus
}


class Ray {
	+Ray()
	+Ray(const Point3D& origin, const Vector3D& direction)
	-_origin : Point3D
	+at(float t) : Point3D {query}
	+origin() : Point3D& {query}
	-_direction : Vector3D
	+direction() : Vector3D& {query}
}


class SolidColorTexture {
	+SolidColorTexture(const Color& color)
	+SolidColorTexture(float red, float green, float blue)
	-_color : Color
	+value(float, float, const Point3D &) : Color {query}
}


class Sphere {
	+Sphere(const Point3D& center, float radius, IMaterial* mat)
	+~Sphere()
	+boundingBox() : AABB {query}
	-material : IMaterial*
	+centroid() : Point3D {query}
	-origin : Point3D
	+hits(const Ray& ray, Interval ray_d, HitRecord& hitrec) : bool {query}
	-_radius : float
	+get_sphere_uv(const Vector3D& p, float& u, float& v) : void {query}
	+translate(const Point3D& trans) : void
}


class SphereFactory {
	+SphereFactory()
	+~SphereFactory()
	+createSphere(const boost::property_tree::ptree& pt) : std::unique_ptr<Sphere> {query}
}


class SplitMix64 {
	+SplitMix64(std::uint64_t state)
	+operator!=(const SplitMix64& lhs, const SplitMix64& rhs) : bool
	+operator==(const SplitMix64& lhs, const SplitMix64& rhs) : bool
	+operator()() : std :: uint64_t
	-m_state : std::uint64_t
	+{static} max() : std::uint64_t
	+{static} min() : std::uint64_t
}


class TextureFactory {
	+TextureFactory()
	+~TextureFactory()
	+createCheckerTexture(const boost::property_tree::ptree& pt) : std::unique_ptr<ITexture> {query}
	+createColorTexture(const boost::property_tree::ptree& pt) : std::unique_ptr<ITexture> {query}
	+createTexture(const boost::property_tree::ptree& pt) : std::unique_ptr<ITexture> {query}
}


class Triangle {
	+Triangle(const Point3D& v0, const Point3D& v1, const Point3D& v2, IMaterial* mat)
	+~Triangle()
	+boundingBox() : AABB {query}
	-_material : IMaterial*
	-_v0 : Point3D
	-_v1 : Point3D
	-_v2 : Point3D
	+centroid() : Point3D {query}
	-_normal : Vector3D
	+hits(const Ray& ray, Interval ray_d, HitRecord& hitrec) : bool {query}
	+rotate(const Point3D& degrees) : void
	+translate(const Point3D& trans) : void
}


class TriangleFactory {
	+TriangleFactory()
	+~TriangleFactory()
	+createTriangle(const boost::property_tree::ptree& pt) : std::unique_ptr<Triangle> {query}
}


class TriangleObj {
	+TriangleObj(const Point3D& v0, const Point3D& v1, const Point3D& v2, const Vector3D& n0, const Vector3D& n1, const Vector3D& n2, IMaterial* mat)
	+TriangleObj(std::array<Point3D, 3> vertices, std::array<Vector3D, 3> normals, IMaterial* mat)
	+~TriangleObj()
	+boundingBox() : AABB {query}
	-_material : IMaterial*
	+centroid() : Point3D {query}
	+hits(const Ray& ray, Interval ray_d, HitRecord& hitrec) : bool {query}
	-_vertices : std::array<Point3D, 3>
	-_normals : std::array<Vector3D, 3>
}


class Vector3D {
	+Vector3D()
	+Vector3D(float x, float y, float z)
	+~Vector3D()
	+cross(const Vector3D& other) : Vector3D {query}
	+{static} min(const Vector3D& v1, const Vector3D& v2) : Vector3D
	+operator*(float scalar) : Vector3D {query}
	+operator*(const Vector3D& other) : Vector3D {query}
	+operator+(const Vector3D& other) : Vector3D {query}
	+operator-() : Vector3D {query}
	+operator-(const Vector3D& other) : Vector3D {query}
	+operator/(float scalar) : Vector3D {query}
	+{static} reflect(const Vector3D& v, const Vector3D& n) : Vector3D
	+unit() : Vector3D {query}
	+{static} unit(const Vector3D& v) : Vector3D
	+normalize() : Vector3D&
	+operator*=(float scalar) : Vector3D&
	+operator*=(const Vector3D& other) : Vector3D&
	+operator+=(const Vector3D& other) : Vector3D&
	+operator-=(const Vector3D& other) : Vector3D&
	+operator/=(float scalar) : Vector3D&
	+near_zero() : bool {query}
	+_x : float
	+_y : float
	+_z : float
	+dot(const Vector3D& other) : float {query}
	+length() : float {query}
	+length_squared() : float {query}
	+operator[](int i) : float {query}
	+operator<<(std::ostream& os, const Vector3D& point) : std :: ostream&
}


class Vector3DFactory {
	+Vector3DFactory()
	+~Vector3DFactory()
	+createVector3D(const boost::property_tree::ptree& pt) : Vector3D {query}
}


class World {
	+World()
	+~World()
	+boundingBox() : AABB {query}
	+centroid() : Point3D {query}
	+hits(const Ray& r, Interval ray_d, HitRecord& rec) : bool {query}
	+primitives : std::vector<std::unique_ptr<IPrimitive>>
	+addPrimitive(std::unique_ptr<IPrimitive> primitive) : void
}


class WorldCreator {
	+WorldCreator()
	+~WorldCreator()
	+createWorld(World& world, const boost::property_tree::ptree& pt) : void {query}
}


class Xoshiro128Plus {
	+Xoshiro128Plus(std::uint64_t seed)
	-m_state : array<std::uint32_t, 4>
	+operator!=(const Xoshiro128Plus& lhs, const Xoshiro128Plus& rhs) : bool
	+operator==(const Xoshiro128Plus& lhs, const Xoshiro128Plus& rhs) : bool
	+operator()() : std :: uint32_t
	+{static} max() : std::uint32_t
	+{static} min() : std::uint32_t
	+{static} rotl(const std::uint32_t x, const int s) : std::uint32_t
	+jump() : void
	+longJump() : void
}


class BVH::Node {
	+bounds : AABB
	+isLeaf() : bool {query}
	+count : std::uint32_t
	+first : std::uint32_t
}


class Image::BMPHeader {
	+height : int32_t
	+width : int32_t
	+xPixelsPerMeter : int32_t
	+yPixelsPerMeter : int32_t
	+bitsPerPixel : uint16_t
	+planes : uint16_t
	+compression : uint32_t
	+dataOffset : uint32_t
	+fileSize : uint32_t
	+headerSize : uint32_t
	+imageSize : uint32_t
	+importantColors : uint32_t
	+reserved : uint32_t
	+totalColors : uint32_t
}





/' Inheritance relationships '/

.AMaterial <|-- .BaseMaterial


.AMaterial <|-- .LightMaterial


.AMaterial <|-- .MetalMaterial


.BVH <|-- .Object


.ColorFactory <|-- .TextureFactory


.IImage <|-- .Image


.IImage <|-- .IncrementalImage


.IMaterial <|-- .AMaterial


.IPrimitive <|-- .Object


.IPrimitive <|-- .Plane


.IPrimitive <|-- .Sphere


.IPrimitive <|-- .Triangle


.IPrimitive <|-- .TriangleObj


.IPrimitive <|-- .World


.ISaveable <|-- .Image


.ISaveable <|-- .IncrementalImage


.ITexture <|-- .CheckerTexture


.ITexture <|-- .SolidColorTexture


.MaterialFactory <|-- .ObjFactory


.MaterialFactory <|-- .PlaneFactory


.MaterialFactory <|-- .SphereFactory


.MaterialFactory <|-- .TriangleFactory


.ObjFactory <|-- .WorldCreator


.PlaneFactory <|-- .WorldCreator


.Point3DFactory <|-- .ObjFactory


.Point3DFactory <|-- .PlaneFactory


.Point3DFactory <|-- .SphereFactory


.Point3DFactory <|-- .TriangleFactory


.SphereFactory <|-- .WorldCreator


.TextureFactory <|-- .MaterialFactory


.TriangleFactory <|-- .WorldCreator


.Vector3DFactory <|-- .PlaneFactory





/' Aggregation relationships '/

.AABB "2" *-- .Point3D


.BVH *-- .BVH


.BVH *-- .BVH::Node


.BVH::Node *-- .AABB


.BaseMaterial *-- .ITexture


.Camera *-- .Color


.Camera "4" *-- .Point3D


.Camera "5" *-- .Vector3D


.CheckerTexture "2" *-- .ITexture


.HitRecord o-- .IMaterial


.HitRecord *-- .Point3D


.HitRecord *-- .Vector3D


.IncrementalImage *-- .Color


.IncrementalImage *-- .Image


.Interval "2" *-- .Interval


.LightMaterial *-- .ITexture


.Main *-- .Camera


.Main *-- .IncrementalImage


.Main *-- .Parameters


.Main *-- .World


.MetalMaterial *-- .ITexture


.Object o-- .IMaterial


.Object *-- .IPrimitive


.Object *-- .Point3D


.Parameters *-- .ArgumentsLoader


.Plane o-- .IMaterial


.Plane *-- .Point3D


.Plane *-- .Vector3D


.Random *-- .Xoshiro128Plus


.Ray *-- .Point3D


.Ray *-- .Vector3D


.SolidColorTexture *-- .Color


.Sphere o-- .IMaterial


.Sphere *-- .Point3D


.Triangle o-- .IMaterial


.Triangle "3" *-- .Point3D


.Triangle *-- .Vector3D


.TriangleObj o-- .IMaterial


.TriangleObj *-- .Point3D


.TriangleObj *-- .Vector3D


.World *-- .IPrimitive






/' Nested objects '/

.ArgumentsLoader +-- .ArgumentsLoader::HelpArgument


.ArgumentsLoader +-- .ArgumentsLoader::MissingArgument


.BVH +-- .BVH::Node


.Image +-- .Image::BMPHeader




@enduml
